<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs Dersleri</title>
    <atom:link href="http://nodejs-dersleri.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://nodejs-dersleri.github.io</link>
    <description>NODEJS İÇİN TÜRKÇE KAYNAK, NOTLAR, ÖRNEK UYGULAMALAR</description>
    <pubDate>Sun, 13 Dec 2015 00:30:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Npm modül yapımı 2</title>
      <link>http://nodejs-dersleri.github.io/articles/npm-modul-yapimi-2/</link>
      <pubDate>Sun, 13 Dec 2015 00:30:00 +0200</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/npm-modul-yapimi-2/</guid>
      <author></author>
      <description>&lt;p&gt;Yapmış olduğumuz modülü npm’e register edip semantik versiyonlamaya göz atacağız.
Semantik versiyonlama hakkında daha fazla bilgiye &lt;a href=&quot;http://semver.org&quot;&gt;buradan&lt;/a&gt; ulaşabilirsiniz.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/articles/npm-modul-yapimi-2/npm-modul-yapimi-2.png&quot; alt=&quot;modul info&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;npm-register&quot;&gt;Npm Register&lt;/h3&gt;
&lt;p&gt;Öncelikle kullanıcı bilgilerimizi &lt;code&gt;npm adduser&lt;/code&gt; ile ekliyoruz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;⏣ npm adduser
Username: arifcakiroglu
Password:
Email: (this IS public) cakirogluarif@gmail.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;npm set&lt;/code&gt;ile bilgilerinizi npmrc dosyasına ekleyebilirsiniz. Bilgilerinize &lt;code&gt;~/.npmrc&lt;/code&gt; dosyasından ulaşabilirsiniz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm set init.author.name &amp;quot;Arif Cakiroglu&amp;quot;
npm set init.author.email &amp;quot;cakirogluarif@gmail.com&amp;quot;
npm set init.author.url &amp;quot;http://nodejs-dersleri.github.io&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Daha sonra oluşturduğumuz modül dizinine gidip &lt;code&gt;npm publish&lt;/code&gt; ile kayıt işlemine başlıyoruz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;⏣ npm publish
+ guidify@0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;versiyonlama&quot;&gt;Versiyonlama&lt;/h4&gt;
&lt;p&gt;Eğer versiyon değişikliği yapmadan tekrar göndermeye çalışırsak aşağıdaki gibi bir hata ile karşılaşırız.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm ERR! publish Failed PUT 403
npm ERR! Darwin 15.0.0
npm ERR! argv &amp;quot;/usr/local/bin/node&amp;quot; &amp;quot;/usr/local/bin/npm&amp;quot; &amp;quot;publish&amp;quot;
npm ERR! node v5.0.0
npm ERR! npm  v3.3.6
npm ERR! code E403

npm ERR! &amp;quot;You cannot publish over the previously published version 0.1.0.&amp;quot; : guidify
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Versiyon güncelleme yapıp denediğimizde yeni versiyonumuz npm’e ulaşmış oluyor.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;⏣ npm publish
+ guidify@0.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Beta versiyonlamak&lt;/strong&gt; için de &lt;code&gt;-beta&lt;/code&gt; takısını kullanabilirsiniz. Bu, modülünüzün latest versiyonu olarak kabul edilmeyecek ve modülünüz &lt;code&gt;npm i -S guidify&lt;/code&gt;diye çağırıldığında en son stable versiyonu inecektir. Eğer beta sürümünü kullanmak isterseniz &lt;code&gt;npm i -S guidify@beta&lt;/code&gt; olarak indirebilirsiniz.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not: Beta versiyonu çıkarken &lt;code&gt;npm publish --tag beta&lt;/code&gt; publish işlemini beta olarak tagliyoruz.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;⏣ npm publish --tag beta
+ guidify@1.1.0-beta.0

npm i -S guidify@beta
└── guidify@1.1.0-beta.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;npm info&lt;/code&gt; ile modülünüzün bilgilerine ulaşabilirsiniz. Aşağıda gördüğünüz gibi &lt;code&gt;&amp;#39;dist-tags&amp;#39;: { latest: &amp;#39;1.1.1&amp;#39;, beta: &amp;#39;1.1.1-beta.0&amp;#39; }&lt;/code&gt; dist-tags kısmına beta versiyonunu ekledi.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ name: &amp;#39;guidify&amp;#39;,
  time:
   { modified: &amp;#39;2015-12-13T12:25:46.912Z&amp;#39;,
     created: &amp;#39;2015-12-13T11:08:34.780Z&amp;#39;,
     &amp;#39;0.1.0&amp;#39;: &amp;#39;2015-12-13T11:08:34.780Z&amp;#39;,
     &amp;#39;0.1.1&amp;#39;: &amp;#39;2015-12-13T11:41:04.164Z&amp;#39;,
     &amp;#39;1.0.1&amp;#39;: &amp;#39;2015-12-13T11:59:07.267Z&amp;#39;,
     &amp;#39;1.1.0&amp;#39;: &amp;#39;2015-12-13T12:01:49.774Z&amp;#39;,
     &amp;#39;1.1.0-beta.0&amp;#39;: &amp;#39;2015-12-13T12:02:47.048Z&amp;#39;,
     &amp;#39;1.1.1&amp;#39;: &amp;#39;2015-12-13T12:25:08.334Z&amp;#39;,
     &amp;#39;1.1.1-beta.0&amp;#39;: &amp;#39;2015-12-13T12:25:46.912Z&amp;#39; },
  maintainers: [ &amp;#39;arifcakiroglu &amp;lt;cakirogluarif@gmail.com&amp;gt;&amp;#39; ],
  &amp;#39;dist-tags&amp;#39;: { latest: &amp;#39;1.1.1&amp;#39;, beta: &amp;#39;1.1.1-beta.0&amp;#39; },
  description: &amp;#39;Globally unique identifier&amp;#39;,
  versions: [ &amp;#39;1.1.0&amp;#39;, &amp;#39;1.1.1&amp;#39; ],
  homepage: &amp;#39;https://github.com/arifcakiroglu/guidify#readme&amp;#39;,
  keywords: [ &amp;#39;unique&amp;#39;, &amp;#39;guid&amp;#39;, &amp;#39;guidify&amp;#39; ],
  repository:
   { type: &amp;#39;git&amp;#39;,
     url: &amp;#39;git+https://github.com/arifcakiroglu/guidify.git&amp;#39; },
  author: &amp;#39;Arif Cakiroglu &amp;lt;cakirogluarif@gmail.com&amp;gt;&amp;#39;,
  bugs: { url: &amp;#39;https://github.com/arifcakiroglu/guidify/issues&amp;#39; },
  license: &amp;#39;MIT&amp;#39;,
  readmeFilename: &amp;#39;README.md&amp;#39;,
  version: &amp;#39;1.1.1&amp;#39;,
  main: &amp;#39;index.js&amp;#39;,
  scripts: { test: &amp;#39;mocha -R spec -u tdd tests/*.js&amp;#39; },
  devDependencies: { mocha: &amp;#39;~1.14.0&amp;#39; },
  gitHead: &amp;#39;8bae71a00fdb58a085346f14e3882cd6f6dad7b8&amp;#39;,
  dist:
   { shasum: &amp;#39;6e5fc5382effeab16753c4eedad0c55ddb28f072&amp;#39;,
     tarball: &amp;#39;http://registry.npmjs.org/guidify/-/guidify-1.1.1.tgz&amp;#39; },
  directories: {} }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;semantik-versiyonlamak&quot;&gt;Semantik versiyonlamak&lt;/h3&gt;
&lt;p&gt;Örnek kod:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test = {
  init: function(){
    this.mesasge = &amp;#39;howoryu :)&amp;#39;
    return this;
  },
  get: function(){
    console.warn(this.message;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;.0.1 &lt;br&gt;
 ^ MAJOR version: Uygulamanızın kullanıldığı yerlerde problem yaratabilecek değişikliklerin yapıldığı, genel değişikliklerin versiyonlanması için kullanılır.&lt;/p&gt;
&lt;p&gt; Yukarıdaki kod parçaçığı üzerinden gidecek olursak örneğin:&lt;/p&gt;
&lt;p&gt; &lt;code&gt;get&lt;/code&gt; methodunu &lt;code&gt;getMessage&lt;/code&gt; diye değiştirdiğinizde versiyonlamada köklü bir değişiklik yapıyorsunuz demektir. Önceki kullanımda get olarak kullanılan method, versiyon güncelleme ile artık programı kullanılamaz hale getirecektir.&lt;/p&gt;
&lt;p&gt; 1.&lt;strong&gt;0&lt;/strong&gt;.1 &lt;br&gt;
—^ MINOR version: Uygulamanızın kullanımını kökten değiştirmeyecek ama yeni özellik olarak ekleyeceğiniz farklıklar için kullanılır.&lt;/p&gt;
&lt;p&gt;Örneğin: &lt;code&gt;get&lt;/code&gt; methodu gibi bir de &lt;code&gt;set&lt;/code&gt;methodu eklediğimizi düşünelim. Bu aşamada kullanıcılar uygulamanızda artık yeni bir özelliğin geldiğini bileceklerdir.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set: function(args){
  this.message = args
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.0.&lt;strong&gt;1&lt;/strong&gt; &lt;br&gt;
—–^ PATCH version: Uygulamanızda ki bug fixler için kullanılan kısım. yaptığınız herhangi bir problemi giderip versiyonlamanızı yapabilirsiniz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;get: function(){
  // console.warn(this.message;
  console.warn(this.message);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Semantik versiyonlama hakkında daha fazla bilgiye &lt;a href=&quot;http://semver.org&quot;&gt;buradan&lt;/a&gt;  ulaşabilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sorularınız olursa yorum yapmaktan çekinmeyiniz efenim, saygılar.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Nodejs REPL(Read-Eval-Print-Loop)</title>
      <link>http://nodejs-dersleri.github.io/articles/nodejs-read-eval-print-loop/</link>
      <pubDate>Mon, 07 Dec 2015 02:30:00 +0200</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/nodejs-read-eval-print-loop/</guid>
      <author></author>
      <description>&lt;h3 id=&quot;repl-nedir-&quot;&gt;REPL nedir?&lt;/h3&gt;
&lt;p&gt;Terminalden interaktif bir şekilde JavaScript çalıştırarak sonuçlarını görmeye yarar. Debug, test ya da bir şeyler denemek için kullanılabilir.&lt;/p&gt;
&lt;p&gt;Hızlıca bazı kodları denemek istiyorsanız her defasında &lt;code&gt;npm init&lt;/code&gt; ile bir proje yaratıp, bir index.js üzerinden çalışmaktansa terminalden sadece &lt;code&gt;node&lt;/code&gt; yazarak Repl’e giriş yapmış oluyoruz.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/articles/nodejs-read-eval-print-loop/nodejs-repl.png&quot; alt=&quot;nodejs-repl&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;matematik-i-lemleri&quot;&gt;Matematik işlemleri&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;λ node
&amp;gt; 6 * 2
12
&amp;gt; 2 + 2
4
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;de-i-ken-tan-mlar-&quot;&gt;Değişken tanımları&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; var arr = [null, undefined, false]
undefined
&amp;gt; arr

// sonuç:
[ null, undefined, false ]

&amp;gt; arr.forEach(function(val) {
... console.log(val)
... });

// sonuç:
null
undefined
false
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;repl-zellikleri&quot;&gt;REPL özellikleri&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;_ altçizgi: en son çalıştırdığınız sorguyu işler&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;// değişkeni tanımladık
width = 3 + 5;
// altçizgi çıktı olarak işlemin sonucunu verdi
_
8
// sadece altçizgi yazarak işmele devam ediyoruz
&amp;gt; _ * 2
16

&amp;gt; a = [1,2,3]
[ 1, 2, 3 ]
&amp;gt; _.length
3
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Multiline çalışmak&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yazıma başladığınızda göreceksinizki enter yaptığınızda yazdığınız kodu işleme alacaktır.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.warn = function( e ) { process.stdout.write( e ) }
[Function]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Eğer yazacağınız fonksiyon fazla satır tutacaksa süslü parantezden sonra enter yaparsanız bir alt satıra geçecektir. Süslü parantezi kapadıktan sonra enter yaparsanız kodu işleme alacaktır.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var chalk = require(&amp;#39;chalk&amp;#39;);
undefined

console.warn = function( e ) {
...process.stdout.write( chalk.red(e) )
...process.exit(1)
...};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not: Eğer multiline fonksiyon yazarken hatalı bir işlem yaparsanız &lt;code&gt;kntrl+c&lt;/code&gt; yaparsanız çıkış yapacaktır. &lt;code&gt;.clear&lt;/code&gt; ya da &lt;code&gt;.break&lt;/code&gt; yazarak da çıkış yapabilirsiniz.&lt;/p&gt;
&lt;h4 id=&quot;repl-komutlar-&quot;&gt;REPL komutları&lt;/h4&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.help&lt;/code&gt;&lt;/strong&gt; komutları unuttuysanız hızlıca göz atabilirsiniz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; .help
break    Sometimes you get stuck, this gets you out
clear    Alias for .break
exit    Exit the repl
help    Show repl options
load    Load JS from a file into the REPL session
save    Save all evaluated commands in this REPL session to a file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;.break, .clear&lt;/code&gt;&lt;/strong&gt; Multiline yazımda satırdan çıkmak ve işlemi iptal etmek için kullanılır.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.exit&lt;/code&gt;&lt;/strong&gt; REPL’den çıkış yapar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.save main.js&lt;/code&gt;&lt;/strong&gt; REPL’den girmiş olduğunuz verileri saklamak isterseniz kullanabilirsiniz. main.js kaydedeceğimiz dosyanın ismi. İstediğiniz isimde kaydedebilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.load main.js&lt;/code&gt;&lt;/strong&gt; Path belirtilerek REPL dosyasını tekrar çağırabilir ve kaldığınız yerden devam edebilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;kntrl + c&lt;/code&gt;&lt;/strong&gt; .break ile aynı işlemi yapar, içinde bulunulan fonksiyondan çıkış yapar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;kntrl + c (iki kere)&lt;/code&gt;&lt;/strong&gt; REPL’den çıkmaya yarar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/strong&gt; Yazdığınız fonksiyon ve değişkenleri, global fonksiyonları görebilirsiniz. History olarak da tanımlayabiliriz.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tab çıktı örneği&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Map                           Promise
Set                           Symbol
Uint16Array                   Uint32Array
Uint8Array                    Uint8ClampedArray
WeakMap                       WeakSet
dir                           a
assert                        b
buffer                        child_process
clearImmediate                clearInterval
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;faydal-eyler&quot;&gt;Faydalı şeyler&lt;/h4&gt;
&lt;p&gt;REPL içindeyken ekranı temizlemek isterseniz &lt;code&gt;kntrl + cmd + L&lt;/code&gt; yaparsanız ekranınız mis gibi olur yazmaya devam edebilirsiniz. &lt;code&gt;clear&lt;/code&gt; komutuyla aynı işe yarar farkı REPL içerisinde clear ya da tanımlı herhangi bir Alias yazarsanız hata alırsınız. Bunun yerine kısayol ile hızlıca temizlik yapabilirsiniz ;)&lt;/p&gt;
&lt;h4 id=&quot;okudu-unuz-i-in-te-ekk-r-ederim&quot;&gt;Okuduğunuz için teşekkür ederim&lt;/h4&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Phantomjs ile responsive ekran görüntüsü alma - 2</title>
      <link>http://nodejs-dersleri.github.io/articles/phantomjs-ile-responsive-ekran-goruntusu-alma-2/</link>
      <pubDate>Mon, 23 Nov 2015 23:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/phantomjs-ile-responsive-ekran-goruntusu-alma-2/</guid>
      <author></author>
      <description>&lt;p&gt;İlk yazımızda ekran görüntüsü almış ve kaydetmiştik, bu yazımızda ise farklı çözünürlüklerde birden çok ekran görüntüsü kaydedeceğiz, bunun yanı sıra script’imize cli’dan gelen paremetrelere farklı davranışlar sergileteceğiz.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;rssg-js&quot;&gt;rssg.js&lt;/h3&gt;
&lt;p&gt;Dosyamızın son hali bu şekildeydi, bunun üzerinden devam edeceğiz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var args = require(&amp;#39;system&amp;#39;).args;
var fs = require(&amp;#39;fs&amp;#39;);
var page = new WebPage();

if ( 1 === args.length ) {
    console.log(&amp;#39;Url addresi girmediniz&amp;#39;);
    phantom.exit();
}

var urlAddress = args[1].toLowerCase();

var viewports = [
    {
        width : 1200,
        height : 800
    },
    {
        width : 1024,
        height : 768
    },
    {
        width : 768,
        height : 1024
    },
    {
        width : 480,
        height : 640
    },
    {
        width : 320,
        height : 480
    }
];

page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        var folder = urlToDir(urlAddress);

        page.viewportSize = viewports[0];
        var output = folder + &amp;quot;/&amp;quot; + getFileName();
        console.log(&amp;#39;Saving &amp;#39; + output);
        page.render(output);
    }
    phantom.exit();
});


function urlToDir(url) {
    var dir = url
        .replace(/^(http|https):\/\//, &amp;#39;&amp;#39;)
        .replace(/\/$/, &amp;#39;&amp;#39;);

    if ( !fs.makeTree(dir) ) {
        console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturulamadı.&amp;#39;);
        phantom.exit();
    }
    console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturuldu.&amp;#39;);
    return dir;
}

function getFileName() {
    var d = new Date();
    var date = [
        d.getUTCFullYear(),
        d.getUTCMonth() + 1,
        d.getUTCDate()
    ];
    var time = [
        d.getHours() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getHours() : d.getHours(),
        d.getMinutes() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getMinutes() : d.getMinutes(),
        d.getSeconds() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getSeconds() : d.getSeconds(),
        d.getMilliseconds()
    ];
    return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + &amp;quot;.png&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;-kt-format-&quot;&gt;Çıktı formatı&lt;/h3&gt;
&lt;p&gt;şimdide paremetre ile dosyayı kaydedeceğimiz formatı parametre olarak alalım.&lt;/p&gt;
&lt;p&gt;urlAddress değişkenimizin altına hemen şu kodu yapıştıralım.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ext = &amp;#39;.&amp;#39; + (args[2] || &amp;#39;png&amp;#39;).toLowerCase();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;buraki kodu açıklamak gerekirse parantezleri kullanarak işlem önceliğini belirledik, &lt;strong&gt;args[2]&lt;/strong&gt; parametresi varsa kullan yoksa &lt;strong&gt;png&lt;/strong&gt; kullan dedik daha sonra &lt;strong&gt;toLowerCase&lt;/strong&gt; fonskiyonu ile hepsini kucuk yazi haline getirdik en son &lt;strong&gt;.&lt;/strong&gt; işareti ile birleştirdik.&lt;/p&gt;
&lt;h4 id=&quot;getfilename&quot;&gt;getFileName&lt;/h4&gt;
&lt;p&gt;şimdi burdada ufak bir düzenleme yapalım&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + &amp;quot;.png&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;satırını &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + ext;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ile değiştirelim&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getFileName() {
    var d = new Date();
    var date = [
        d.getUTCFullYear(),
        d.getUTCMonth() + 1,
        d.getUTCDate()
    ];
    var time = [
        d.getHours() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getHours() : d.getHours(),
        d.getMinutes() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getMinutes() : d.getMinutes(),
        d.getSeconds() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getSeconds() : d.getSeconds(),
        d.getMilliseconds()
    ];
    return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + ext;
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;phantomjs rssg.js https://nodejs-dersleri.github.io/ pdf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/phantomjs-ile-responsive-ekran-goruntusu-alma-2/pdf.png&quot; alt=&quot;pdf&quot;&gt;&lt;/p&gt;
&lt;p&gt;hangi formatlarda çıktı alabileceğimizi bir önceki yazımızda listemiştik.&lt;/p&gt;
&lt;h3 id=&quot;g-r-nt-y-k-rpma&quot;&gt;Görüntüyü kırpma&lt;/h3&gt;
&lt;p&gt;şimdide az önce eklediğimiz &lt;strong&gt;ext&lt;/strong&gt; değişkenin altına şu kodu ekleyelim&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var clipping = args[3] || false;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;getfilename&quot;&gt;getFileName&lt;/h4&gt;
&lt;p&gt;şimdide fonksiyonumuzda biraz değişiklik yapalım&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getFileName(viewport) {
    var d = new Date();
    var date = [
        d.getUTCFullYear(),
        d.getUTCMonth() + 1,
        d.getUTCDate()
    ];
    var time = [
        d.getHours() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getHours() : d.getHours(),
        d.getMinutes() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getMinutes() : d.getMinutes(),
        d.getSeconds() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getSeconds() : d.getSeconds(),
        d.getMilliseconds()
    ];
    var resolution = viewport.width + (clipping ? &amp;quot;x&amp;quot; + viewport.height : &amp;#39;&amp;#39;);

    return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + &amp;quot;_&amp;quot; + resolution + ext;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;yaptığımız değişiklikleri hızlıca özetleyelim, fonksiyonumuz artık bir viewport parametre alıyor ve &lt;strong&gt;resolution&lt;/strong&gt; adında yeni bir değişkene sahip bu değişkene ise gelen viewport objesinin width değerini ve clipping varsa height degerini basıyor.&lt;/p&gt;
&lt;h4 id=&quot;ba-lant-kodu&quot;&gt;bağlantı kodu&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        var folder = urlToDir(urlAddress);
        if ( clipping ) {
            page.clipRect = viewports[0];
        }
        page.viewportSize = viewports[0];
        var output = folder + &amp;quot;/&amp;quot; + getFileName(viewports[0]);
        console.log(&amp;#39;Saving &amp;#39; + output);
        page.render(output);
    }
    phantom.exit();
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Eğer clipping değişkeni false değilse &lt;strong&gt;page.clipRect = viewports[0];&lt;/strong&gt; komutunu aktif ediyoruz bu bizim görüntüyü kırpma kodumuz, ve getFileName fonksiyonumuza viewport parametresini gönderdik &lt;strong&gt;getFileName(viewports[0])&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;phantomjs rssg.js https://nodejs-dersleri.github.io/ png
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;phantomjs rssg.js https://nodejs-dersleri.github.io/ png true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bu 2 komutunda sorunsuz çalışması gerekiyor.( eğer çalışmaz yazının devamında mevcut kodlarımızı vereceğim karşılaştırma yapabilirsiniz)
&lt;img src=&quot;/articles/phantomjs-ile-responsive-ekran-goruntusu-alma-2/clipping.png&quot; alt=&quot;clipping&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;rssg-js&quot;&gt;rssg.js&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var args = require(&amp;#39;system&amp;#39;).args;
var fs = require(&amp;#39;fs&amp;#39;);
var page = new WebPage();

if ( 1 === args.length ) {
    console.log(&amp;#39;Url addresi girmediniz&amp;#39;);
    phantom.exit();
}

var urlAddress = args[1].toLowerCase();
var ext = &amp;#39;.&amp;#39; + (args[2] || &amp;#39;png&amp;#39;).toLowerCase();
var clipping = args[3] || false;

var viewports = [
    {
        width : 1200,
        height : 800
    },
    {
        width : 1024,
        height : 768
    },
    {
        width : 768,
        height : 1024
    },
    {
        width : 480,
        height : 640
    },
    {
        width : 320,
        height : 480
    }
];

page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        var folder = urlToDir(urlAddress);
        if ( clipping ) {
            page.clipRect = viewports[0];
        }
        page.viewportSize = viewports[0];
        var output = folder + &amp;quot;/&amp;quot; + getFileName(viewports[0]);
        console.log(&amp;#39;Saving &amp;#39; + output);
        page.render(output);
    }
    phantom.exit();
});


function urlToDir(url) {
    var dir = url
        .replace(/^(http|https):\/\//, &amp;#39;&amp;#39;)
        .replace(/\/$/, &amp;#39;&amp;#39;);

    if ( !fs.makeTree(dir) ) {
        console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturulamadı.&amp;#39;);
        phantom.exit();
    }
    console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturuldu.&amp;#39;);
    return dir;
}

function getFileName(viewport) {
    var d = new Date();
    var date = [
        d.getUTCFullYear(),
        d.getUTCMonth() + 1,
        d.getUTCDate()
    ];
    var time = [
        d.getHours() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getHours() : d.getHours(),
        d.getMinutes() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getMinutes() : d.getMinutes(),
        d.getSeconds() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getSeconds() : d.getSeconds(),
        d.getMilliseconds()
    ];
    var resolution = viewport.width + (clipping ? &amp;quot;x&amp;quot; + viewport.height : &amp;#39;&amp;#39;);

    return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + &amp;quot;_&amp;quot; + resolution + ext;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;t-m-z-n-rl-kler&quot;&gt;Tüm çözünürlükler&lt;/h3&gt;
&lt;h4 id=&quot;ba-lant-fonksiyonumuzu-g-ncelleyelim&quot;&gt;bağlantı fonksiyonumuzu güncelleyelim&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        var folder = urlToDir(urlAddress);
        var key, output;

        function render(n) {
            if ( !!n ) {
                key = n - 1;
                page.viewportSize = viewports[key];
                if ( clipping ) {
                    page.clipRect = viewports[key];
                }
                output = folder + &amp;quot;/&amp;quot; + getFileName(viewports[key]);
                console.log(&amp;#39;Saving &amp;#39; + output);
                page.render(output);
                render(key);
            }
        }
        render(viewports.length);
    }
    phantom.exit();
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;burada for ile tüm viewports dizisini dönebilirsiniz, ben recursive fonksiyon kullanmayi tercih ettim bunun nedeni bana göre işi biten bir sonraki işlemi tetiklemeli.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;phantomjs rssg.js https://nodejs-dersleri.github.io/ png true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/phantomjs-ile-responsive-ekran-goruntusu-alma-2/clipping.png&quot; alt=&quot;clipping&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;rssg-js&quot;&gt;rssg.js&lt;/h3&gt;
&lt;p&gt;son olarak kodumuzun son hali.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var args = require(&amp;#39;system&amp;#39;).args;
var fs = require(&amp;#39;fs&amp;#39;);
var page = new WebPage();

if ( 1 === args.length ) {
    console.log(&amp;#39;Url addresi girmediniz&amp;#39;);
    phantom.exit();
}

var urlAddress = args[1].toLowerCase();
var ext = &amp;#39;.&amp;#39; + (args[2] || &amp;#39;png&amp;#39;).toLowerCase();
var clipping = args[3] || false;

var viewports = [
    {
        width : 1200,
        height : 800
    },
    {
        width : 1024,
        height : 768
    },
    {
        width : 768,
        height : 1024
    },
    {
        width : 480,
        height : 640
    },
    {
        width : 320,
        height : 480
    }
];

page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        var folder = urlToDir(urlAddress);
        var key, output;

        function render(n) {
            if ( !!n ) {
                key = n - 1;
                page.viewportSize = viewports[key];
                if ( clipping ) {
                    page.clipRect = viewports[key];
                }
                output = folder + &amp;quot;/&amp;quot; + getFileName(viewports[key]);
                console.log(&amp;#39;Saving &amp;#39; + output);
                page.render(output);
                render(key);
            }
        }
        render(viewports.length);
    }
    phantom.exit();
});


function urlToDir(url) {
    var dir = url
        .replace(/^(http|https):\/\//, &amp;#39;&amp;#39;)
        .replace(/\/$/, &amp;#39;&amp;#39;);

    if ( !fs.makeTree(dir) ) {
        console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturulamadı.&amp;#39;);
        phantom.exit();
    }
    console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturuldu.&amp;#39;);
    return dir;
}

function getFileName(viewport) {
    var d = new Date();
    var date = [
        d.getUTCFullYear(),
        d.getUTCMonth() + 1,
        d.getUTCDate()
    ];
    var time = [
        d.getHours() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getHours() : d.getHours(),
        d.getMinutes() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getMinutes() : d.getMinutes(),
        d.getSeconds() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getSeconds() : d.getSeconds(),
        d.getMilliseconds()
    ];
    var resolution = viewport.width + (clipping ? &amp;quot;x&amp;quot; + viewport.height : &amp;#39;&amp;#39;);

    return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + &amp;quot;_&amp;quot; + resolution + ext;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;son-olarak&quot;&gt;son olarak&lt;/h3&gt;
&lt;p&gt;İlk yazı biraz uzun sürdüğü için bu yazımızda mümkün olduğunca kısa tutarak devam etmek istedim, kimine göre ilk yazı sıkıcı ve uzun, kimine göre bu yazı yeterince açıklayacı olmayacak diye tahmin ediyorum.
Uzun lafın kısası umarım okuyan herkes için faydalı bir anlatım olmuştur.&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Phantomjs ile responsive ekran görüntüsü alma - 1</title>
      <link>http://nodejs-dersleri.github.io/articles/phantomjs-ile-responsive-ekran-goruntusu-alma/</link>
      <pubDate>Sun, 22 Nov 2015 23:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/phantomjs-ile-responsive-ekran-goruntusu-alma/</guid>
      <author></author>
      <description>&lt;p&gt;Phantomjs kullanarak cli üzerinden belli bir sayfanın farklı çözünürlüklerdeki görüntüsü kaydedeceğiz.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;gereksinimler&quot;&gt;Gereksinimler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Phantomjs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yazacağımız kodlar phantomjs üzerinden çalışacağı için phantomjs’e bağımlıdır, aşşağıdaki adresten phantomjs’i indirip kurabilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/download.html&quot;&gt;http://phantomjs.org/download.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;rssg-js&quot;&gt;rssg.js&lt;/h3&gt;
&lt;p&gt;Öncelikle kodlarımızı yazmak için bir dosya açmamız gerekiyor, ben responsive screen shot grabber’ın kısaltması olan &lt;strong&gt;rssg.js&lt;/strong&gt; olarak açacağım anlatım boyuncada bunun üzerinden devam edeceğim.&lt;/p&gt;
&lt;h3 id=&quot;system-args&quot;&gt;system.args&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var args = require(&amp;#39;system&amp;#39;).args;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sistem modülünün çeşitli özellikleri mevcut &lt;a href=&quot;http://phantomjs.org/api/system/&quot;&gt;http://phantomjs.org/api/system/&lt;/a&gt; buradan bunlara erişebilirsiniz, bize bu anlatımda sadece &lt;strong&gt;args&lt;/strong&gt; özelliği gerekli.&lt;/p&gt;
&lt;p&gt;system.args özelliği javascriptten bildiğimiz arguments ile aynı görevi yapmakta, yani girilen her parametreyi bir dizi olarak bize döndürmektedir.&lt;/p&gt;
&lt;p&gt;bir örnek ile pekiştiricek olursak;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function test(){
    return arguments;
}
var cevap = test(1,2,3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;cevap nesnesi bize geriye &lt;strong&gt;[1,2,3]&lt;/strong&gt; döndürür, cevap[0] ise &lt;strong&gt;1&lt;/strong&gt;;
system.arg’da aynen bu işi yapmakta, phantom js ile örneklendiricek olursak eğer;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;phantomjs rssg.js https://nodejs-dersleri.github.io/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;komutu tetiklediğimizde args nesnemiz şu şekilde olacaktır;&lt;/p&gt;
&lt;p&gt;[‘rssg.js’, ‘&lt;a href=&quot;https://nodejs-dersleri.github.io/&quot;&gt;https://nodejs-dersleri.github.io/&lt;/a&gt;‘]&lt;/p&gt;
&lt;p&gt;dipnot: cli’dan gelen her parametre string formatındadır.&lt;/p&gt;
&lt;h3 id=&quot;fs-filesystem-&quot;&gt;fs (filesystem)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var fs = require(&amp;#39;fs&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Adındanda anlaşılacağı gibi dosya sistemi api’ı, dosyalar ile ilgili birçok işlemi içinde barındıran mödül.
Mevcut olan tüm api listesine buradan ulaşabilirsiniz &lt;a href=&quot;http://phantomjs.org/api/fs/&quot;&gt;http://phantomjs.org/api/fs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dipnot:kullanılabilir özelliklere yukarıda ki adresden bakınız node.js üzerindeki fs api’ı ile aynı değildir. &lt;/p&gt;
&lt;h3 id=&quot;webpage&quot;&gt;Webpage&lt;/h3&gt;
&lt;p&gt;phantomjs’in olmazsa olmazı diyebiliriz.
sayfalarımızı bu api sayesinde acip ekran görüntüsünü alacağız&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var page = new WebPage();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tüm api listesine buradan ulaşabilirsiniz &lt;a href=&quot;http://phantomjs.org/api/webpage/&quot;&gt;http://phantomjs.org/api/webpage/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;url-varm-&quot;&gt;Url varmı ?&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;if ( 1 === args.length ) {
    console.log(&amp;#39;Url adresi girmediniz&amp;#39;);
    phantom.exit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;yukarıdaki kodu açıklayacak olursak;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;herşeyden önce if koşulu size biraz farklı gelmiş olabilir &lt;strong&gt;Yoda conditions&lt;/strong&gt; jargonu diye geçer ve çeşitli avantajları vardır (ben henüz bir dezavantajını görmedim) bunları ilgili wikipedia sayfasından ve çeşitli kaynaklardan bulabilirsiniz &lt;a href=&quot;https://en.wikipedia.org/wiki/Yoda_conditions&quot;&gt;https://en.wikipedia.org/wiki/Yoda_conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 === args.length&lt;/strong&gt;
unutmayın ilk parametre dosyamızın adı eğer length 1’e eşit ise args nesnem &lt;strong&gt;[‘rssg.js’]&lt;/strong&gt; şeklindedir herhangi bir parametre girilmemiş, dolasıyla bağlanacak bir url adresimiz yok demektir.&lt;/li&gt;
&lt;li&gt;eğer koşulumuz sağlanırsa &lt;strong&gt;phantom.exit();&lt;/strong&gt; ile işlemleri sonlandırıyoruz.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;url-address&quot;&gt;url address&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var urlAddress = args[1].toLowerCase();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Unutmayın gelen her parametre string (kullanıcı 1 değerini girmiş olsa bile string olarak geleceği için string mi diye kontrol etmemize gerek yok), dolasıyla string nesnesinin her özelliğini kullanabiliriz.
Daha sonra bu url adresini klasör oluştururken’de kullanacağız o yüzden düzenli bir yapı elde etmek için gelen adresi toLowerCase() ile tümünü küçük harflere çeviriyoruz.&lt;/p&gt;
&lt;h3 id=&quot;-z-n-rl-kler&quot;&gt;çözünürlükler&lt;/h3&gt;
&lt;p&gt;Hangi çözünürlüklerde çıktılar alacağımızı belirleyeceğimiz bir dizi yaratıyoruz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var viewports = [
    {
        width : 1200,
        height : 800
    },
    {
        width : 1024,
        height : 768
    },
    {
        width : 768,
        height : 1024
    },
    {
        width : 480,
        height : 640
    },
    {
        width : 320,
        height : 480
    }
];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;rssg-js&quot;&gt;rssg.js&lt;/h3&gt;
&lt;p&gt;karışıklıkların önüne geçmek için dosyamızın şuanki hali şu şekilde olmalı.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var args = require(&amp;#39;system&amp;#39;).args;
var fs = require(&amp;#39;fs&amp;#39;);
var page = new WebPage();

if ( 1 === args.length ) {
    console.log(&amp;#39;Url adresi girmediniz&amp;#39;);
    phantom.exit();
}

var urlAddress = args[1].toLowerCase();

var viewports = [
    {
        width : 1200,
        height : 800
    },
    {
        width : 1024,
        height : 768
    },
    {
        width : 768,
        height : 1024
    },
    {
        width : 480,
        height : 640
    },
    {
        width : 320,
        height : 480
    }
];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;test-zaman-&quot;&gt;Test Zamanı&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        console.log(urlAddress, &amp;#39;bağlantı başarılı&amp;#39;);
    }
    phantom.exit();
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bu kodu’da ekledikten sonra &lt;strong&gt;phantomjs rssg.js &lt;a href=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;&lt;/strong&gt;
komutu ile terminalden kontrol ediyoruz
&lt;img src=&quot;/articles/phantomjs-ile-responsive-ekran-goruntusu-alma/test.png&quot; alt=&quot;test&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;klas-r-olu-tural-m&quot;&gt;klasör oluşturalım&lt;/h3&gt;
&lt;p&gt;ilk önce url adresini klasör adına dönüştürcek ve oluşturcak bir fonksiyon yazalım&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function urlToDir(url) {
    var dir = url
        .replace(/^(http|https):\/\/, &amp;#39;&amp;#39;)
        .replace(/\/$/, &amp;#39;&amp;#39;);

    if ( !fs.makeTree(dir) ) {
        console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturulamadı.&amp;#39;);
        phantom.exit();
    }
    console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturuldu.&amp;#39;);
    return dir;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kısaca fonksiyonumuzu açıklayalım,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fonksiyonumuz 1 parametre alıyor ve bunun url adresi olması bekleniyor&lt;/li&gt;
&lt;li&gt;gelen url adresi regex kullanarak replace methodu yardımıyla temizleniyor ve &lt;strong&gt;dir&lt;/strong&gt; değişkenine aktarılıyor.&lt;ul&gt;
&lt;li&gt;/^(http|https):\/\/ &lt;strong&gt;http://&lt;/strong&gt; yada &lt;strong&gt;https://&lt;/strong&gt; ile başyalanları demek anlamına geliyor&lt;/li&gt;
&lt;li&gt;/\/$/ &lt;strong&gt;/&lt;/strong&gt; ile bitenler anlamına geliyor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fs.makeTree() fonksiyonu string alir ve boolean bir değer döner aldığı string paremetreye göre klasör oluşturur &lt;a href=&quot;http://phantomjs.org/api/fs/method/make-tree.html&quot;&gt;http://phantomjs.org/api/fs/method/make-tree.html&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;if ( !fs.makeTree(dir) ) az önce oluşturduğumuz path i verdik eğer ki klasörü oluşturursa geriye true değerini dönecek bu bizim istediğimiz sonuç gelen sonuçu tersine ceviriyoruz true ise false, false ise true yapıyoruz. fonksiyonunun bize false donmesi durumunda if koşulu true olucak ve içeriye giricek.
bu durumda console’a klasör oluşturulamadı diyip phantomjs’den çıkış yapıyoruz.&lt;/li&gt;
&lt;li&gt;eğer ki if koşulu gerçekleşmez ise geriye path’i (klasör yolunu) döndürüyoruz.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bağlantı kodunu güncelleyelim&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        var folder = urlToDir(urlAddress);
    }
    phantom.exit();
});
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;phantomjs rssg.js http://www.google.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/phantomjs-ile-responsive-ekran-goruntusu-alma/klasor.png&quot; alt=&quot;klasor&quot;&gt;&lt;/p&gt;
&lt;p&gt; ve dizinimizde klasör oluşmuş olması gerekiyor.&lt;/p&gt;
&lt;h3 id=&quot;dosya-ad-&quot;&gt;dosya adı&lt;/h3&gt;
&lt;p&gt;Aynı sayfa için birçok defa deneme yapılabileceği için benzersiz dosya isimleri oluşturmamız lazım ve aralarındaki farkları görmek açısından bence tarihe göre dosya isimlendirmesi yapmak mantıklı olur.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getFileName(viewport) {
    var d = new Date();
    var date = [
        d.getUTCFullYear(),
        d.getUTCMonth() + 1,
        d.getUTCDate()
    ];
    var time = [
        d.getHours() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getHours() : d.getHours(),
        d.getMinutes() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getMinutes() : d.getMinutes(),
        d.getSeconds() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getSeconds() : d.getSeconds(),
        d.getMilliseconds()
    ];
    return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + &amp;quot;.png&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;yukarıdaki kod’da çok fazla açıklanacak birşey yok aslında sadece sürekli &lt;strong&gt;+&lt;/strong&gt; ile concat etmek yerine parçaları diziye atayıp &lt;strong&gt;-&lt;/strong&gt; ile birleştiriyorum.&lt;/p&gt;
&lt;h3 id=&quot;ilk-ekran-g-r-nt-s-i-in-son-haz-rl-k&quot;&gt;ilk ekran görüntüsü için son hazırlık&lt;/h3&gt;
&lt;p&gt;bağlantı kodumuzu şu şekilde güncelleyelim&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        var folder = urlToDir(urlAddress);

        page.viewportSize = viewports[0];
        var output = folder + &amp;quot;/&amp;quot; + getFileName();
        console.log(&amp;#39;Saving &amp;#39; + output);
        page.render(output);
    }
    phantom.exit();
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yeni gelen komutlarımızı tanıyalım webpage modülünün linkini yukarı belirtmiştim zaten, detaylı bakmak için yukarıda bağlantıyı kullanabilirsiniz.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;page.viewportSize&lt;/strong&gt; sayfa görünüm boyutunu ayarlamak için kullanılıyor. &lt;a href=&quot;http://phantomjs.org/api/webpage/property/viewport-size.html&quot;&gt;http://phantomjs.org/api/webpage/property/viewport-size.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;page.render&lt;/strong&gt; sayfayı kaydetmet için kullanılıyor çıktı formatları &lt;a href=&quot;http://phantomjs.org/api/webpage/method/render.html&quot;&gt;http://phantomjs.org/api/webpage/method/render.html&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;PNG&lt;/li&gt;
&lt;li&gt;GIF&lt;/li&gt;
&lt;li&gt;JPEG&lt;/li&gt;
&lt;li&gt;PDF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rssg-js&quot;&gt;rssg.js&lt;/h3&gt;
&lt;p&gt;dosyamızın son hali bu şekilde olmalı&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var args = require(&amp;#39;system&amp;#39;).args;
var fs = require(&amp;#39;fs&amp;#39;);
var page = new WebPage();

if ( 1 === args.length ) {
    console.log(&amp;#39;Url addresi girmediniz&amp;#39;);
    phantom.exit();
}

var urlAddress = args[1].toLowerCase();

var viewports = [
    {
        width : 1200,
        height : 800
    },
    {
        width : 1024,
        height : 768
    },
    {
        width : 768,
        height : 1024
    },
    {
        width : 480,
        height : 640
    },
    {
        width : 320,
        height : 480
    }
];

page.open(urlAddress, function (status) {
    if ( &amp;#39;success&amp;#39; !== status ) {
        console.log(&amp;#39;Adrese bağlanılamadı.&amp;#39;);
    } else {
        var folder = urlToDir(urlAddress);

        page.viewportSize = viewports[0];
        var output = folder + &amp;quot;/&amp;quot; + getFileName();
        console.log(&amp;#39;Saving &amp;#39; + output);
        page.render(output);
    }
    phantom.exit();
});


function urlToDir(url) {
    var dir = url
        .replace(/^(http|https):\/\//, &amp;#39;&amp;#39;)
        .replace(/\/$/, &amp;#39;&amp;#39;);

    if ( !fs.makeTree(dir) ) {
        console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturulamadı.&amp;#39;);
        phantom.exit();
    }
    console.log(&amp;#39;&amp;quot;&amp;#39; + dir + &amp;#39;&amp;quot; oluşturuldu.&amp;#39;);
    return dir;
}

function getFileName() {
    var d = new Date();
    var date = [
        d.getUTCFullYear(),
        d.getUTCMonth() + 1,
        d.getUTCDate()
    ];
    var time = [
        d.getHours() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getHours() : d.getHours(),
        d.getMinutes() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getMinutes() : d.getMinutes(),
        d.getSeconds() &amp;lt;= 9 ? &amp;#39;0&amp;#39; + d.getSeconds() : d.getSeconds(),
        d.getMilliseconds()
    ];
    return date.join(&amp;#39;-&amp;#39;) + &amp;#39;_&amp;#39; + time.join(&amp;#39;-&amp;#39;) + &amp;quot;.png&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;eğer herşey doğru ise ilk ekran görüntümüzü alalım.&lt;/p&gt;
&lt;h3 id=&quot;ilk-ekran-g-r-nt-s-&quot;&gt;ilk ekran görüntüsü&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;phantomjs rssg.js https://nodejs-dersleri.github.io/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/phantomjs-ile-responsive-ekran-goruntusu-alma/ilk-ekran-goruntusu.png&quot; alt=&quot;ilk-ekran-goruntusu&quot;&gt;&lt;/p&gt;
&lt;p&gt;klasörümüzde ise aşşağıdaki gibi bir ekran görüntüsü olması gerekiyor.
&lt;img src=&quot;/articles/phantomjs-ile-responsive-ekran-goruntusu-alma/2015-11-22_22-03-19-449.png&quot; alt=&quot;ilk-ekran-goruntusu&quot;&gt;&lt;/p&gt;
&lt;p&gt;Gördüğünüz gibi ekran görüntüsü hazır ama bir problem var viewports dizimizin ilk nesnesini gönderdik yani &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    width : 1200,
    height : 800
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fakat çıktıda yükseklik 800px değil, aslında olması gereken sonuç tam olarakta bu;
viewports dediğimiz şey aslında bir nevi pencere boyutu yani 1200x800 bir çözünürlükte siteyi açtiğinizda sitenin Y eksininde sadece 800px’lik kısmını görüyorsunuz? hayır scroll yaparak tüm yükseklikte gezmeniz mümkün
burdaki sonuçta aynen bu.
bir sonraki yazımızda hem farklı boyutlarda hemde görüntüyü kırparak ve bunları paremetrelere dayalı olarak yapacağız.&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Npm modulleri - Chalk nedir?</title>
      <link>http://nodejs-dersleri.github.io/articles/npm-moduleri-chalk-nedir/</link>
      <pubDate>Fri, 06 Nov 2015 23:30:00 +0300</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/npm-moduleri-chalk-nedir/</guid>
      <author></author>
      <description>&lt;p&gt;Chalk, colors, cli-color modülleri aslında aynı işe yarıyor. Terminalde verdiğiniz çıktıları renklendirip font’ları ile farkındalık yaratabilirsiniz.&lt;/p&gt;
&lt;p&gt;Aralarında bazı farklılıklar olsa da içlerinde hız, api bakımından en iyisi(benim için). İndirilme oranıda epey yüksek, 5700’den fazla &lt;a href=&quot;https://www.npmjs.com/browse/depended/chalk&quot;&gt;npm modülünde&lt;/a&gt; kullanılmış.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/articles/npm-moduleri-chalk-nedir/npm-modulleri-chalk.svg&quot; alt=&quot;Npm modulleri - Chalk nedir&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Konuyu iki başlık altında inceleyeceğiz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Chalk’ın kullanılışı&lt;/li&gt;
&lt;li&gt;Chalk gibi bir modül ya da util nasıl yapabiliriz.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&quot;package-json&quot;&gt;package.json&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;chalk-module&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;repository&amp;quot; : {
    &amp;quot;type&amp;quot; : &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot; : &amp;quot;https://github.com/nodejs-dersleri/chalk&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;index-js&quot;&gt;index.js&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
&amp;#39;use strict&amp;#39;;

/**
 * Bağımlılıkları tanımlıyoruz
 */
var chalk = require(&amp;#39;chalk&amp;#39;);

/**
 * Aşağıda Niteleyiciler, Renkler ve Arkaplan renklerini bulabilirsiniz
 * Bir kaç örnekle başlayalım.
 */
console.log(
  chalk.blue.bold(&amp;#39;1. Nodejs için&amp;#39;)
)

/**
 * Inverse: atanan rengi tersine çevirir.
 */
console.log(
  chalk.blue(&amp;#39;2. Türkçe&amp;#39;) + &amp;#39; Kaynak&amp;#39; + chalk.inverse.red(&amp;#39;!&amp;#39;)
)

/**
 * birdern fazla niteleyici ve rengi ard arda kullanabilirsiniz
 */
console.log(
  chalk.blue.magenta.dim.bold(&amp;#39;3. Notlar&amp;#39;)
)

console.log(
  chalk.black(&amp;#39;5. Örnek&amp;#39;, chalk.underline.bgGreen(&amp;#39; uygulamalar&amp;#39;) + &amp;#39;!&amp;#39;)
)

console.log(
  chalk.green(
      &amp;#39;Nodejs Dersleri &amp;#39; +
      chalk.blue.underline.bold(&amp;#39;nodejs-dersleri.github.io&amp;#39;) +
      &amp;#39; ziyaret edin&amp;#39;
  )
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Şimdi terminalden &lt;code&gt;index.js&lt;/code&gt; dosyamızı çağıralım.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/npm-moduleri-chalk-nedir/nodejs-chalk-nedir.png&quot; alt=&quot;nodejs-chalk-nedir&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;niteleyiciler&quot;&gt;Niteleyiciler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bold&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;italic&lt;/code&gt; &lt;em&gt;(yaygın olarak desteklenmiyor)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;underline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inverse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hidden&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strikethrough&lt;/code&gt; &lt;em&gt;(yaygın olarak desteklenmiyor)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;renkler&quot;&gt;Renkler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;black&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;green&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yellow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;magenta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;white&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gray&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;arkaplan-renkleri&quot;&gt;Arkaplan renkleri&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bgBlack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bgRed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bgGreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bgYellow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bgBlue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bgMagenta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bgCyan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bgWhite&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;
&lt;h2 id=&quot;kendi-mod-l-m-z-yapal-m&quot;&gt;Kendi modülümüzü yapalım&lt;/h2&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ansi renk kodları ve niteleyiciler hakkında daha fazla bilgi için &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code#graphics&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;module.js&lt;/code&gt; adında bir dosya oluşturalım.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;#39;use strict&amp;#39;;

module.exports= function(text,type){

  /**
   * Tüm renk ve niteleyici kodları için kaynaklar kısmında link mevcut
   */
  var style = {
    bold:       [1, 22],
    underline:  [4, 24],
    black:      [30, 39],
        red:        [31, 39],
        green:      [32, 39],
    bgBlack:    [40, 49],
        bgRed:      [41, 49],
        bgGreen:    [42, 49],
        bgYellow:   [43, 49],
        bgBlue:     [44, 49]
  }

  function wrap(args) {
    style = style[type];

    /**
    * Aslında yaptığımı şey =&amp;gt; \u001b[31m  text  \u001b[m39
    * bu bize kırmızı renkte bir çıktı verecektir.
    */
    var tags = {
       open: &amp;#39;\u001b[&amp;#39; + style[0] + &amp;#39;m&amp;#39;,
       close: &amp;#39;\u001b[&amp;#39; + style[1] + &amp;#39;m&amp;#39;
     }
    return tags.open + args + tags.close
  }

  return wrap(text)

};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Şimdi index dosyamıza şu kodları ekleyelim&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var renk = require(&amp;#39;./module.js&amp;#39;);

console.log(
  renk(&amp;#39;Bu bizim module.js\&amp;#39;ten dönen renklendirilmiş veri :)&amp;#39;,&amp;#39;bgBlue&amp;#39;) + &amp;#39;\n&amp;#39;  +
  renk(&amp;#39;Aşağıdakiler ise chalk\&amp;#39;tan alınan çıktılar&amp;#39;,&amp;#39;green&amp;#39;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/npm-moduleri-chalk-nedir/nodejs-terminal-renklendirme.png&quot; alt=&quot;nodejs-terminal-renklendirme&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kendi modülümüzü  anlatmak için yaptım. Generic bir yapısı yoktur.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;kaynaklar&quot;&gt;Kaynaklar&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.bash-hackers.org/scripting/terminalcodes&quot;&gt;http://wiki.bash-hackers.org/scripting/terminalcodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chalk/chalk&quot;&gt;https://github.com/chalk/chalk&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Npm modulleri - FTP nedir?</title>
      <link>http://nodejs-dersleri.github.io/articles/npm-moduleri-ftp-nedir/</link>
      <pubDate>Wed, 04 Nov 2015 23:30:00 +0300</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/npm-moduleri-ftp-nedir/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;code&gt;ftp&lt;/code&gt; modülü standart ftp protokollerini kullanarak ftp server’a bağlantı yapmamızı sağlayan bir modül. Minimal ftp adında bir konu başlığımız mevcut. Bu konuyu videolu olarak anlatmayı düşünüyorum. Şimdilik sadece &lt;code&gt;ftp&lt;/code&gt; modülünün nasıl çalıştığını anlatacağım.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Yapacağımız minimal ftp büyük olasılıkla aşağıdaki görsellere yakın olarak yayınlanacak.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/npm-moduleri-ftp-nedir/main.png&quot; alt=&quot;main.js&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/npm-moduleri-ftp-nedir/ftp.png&quot; alt=&quot;ftp.js&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;package-json&quot;&gt;package.json&lt;/h3&gt;
&lt;p&gt;Npm init ile başlıyoruz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;package.json dosyamız oluştu.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;ftp-app&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;index-js&quot;&gt;index.js&lt;/h3&gt;
&lt;p&gt;Şimdi &lt;code&gt;index.js&lt;/code&gt; dosyası oluşturuyoruz.&lt;/p&gt;
&lt;p&gt;Test için bir fpt account oluşturmuştum, siz mevcut ftp hesaplarınızı deneyebilirsiniz. Host, user, password olarak bilgilerinizi girdiğinizde bağlantı sağlanacaktır. Eğer herhangi bir host girmezseniz 127.0.0.1:23 ip/portuyla localinize bağlanmayı deneyecektir.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// FTP modülünü require ile çağırıyoruz.
var Client = require(&amp;#39;ftp&amp;#39;);

// yeni bir client oluşturuyoruz.
var client = new Client();

/**
 * account objesine verilerimizi giriyoruz, diğer opsiyonlar (secure vs)
 * için https://www.npmjs.com/package/ftp#methods methods&amp;gt;connect başlığı
 * altında daha fazla bilgi var.
 */

var account = {
  host: &amp;quot;ftp.hostisminiz.com&amp;quot;,
  user: &amp;quot;kullaniciadi&amp;quot;,
  password : &amp;quot;sifreniz&amp;quot;,
}

/**
 * ready: başarılı bir şekilde giriş yapıldığında
 */
client.on(&amp;#39;ready&amp;#39;, function() {

  /**
   * list: server&amp;#39;daki dosya/file listesini döner
   */
  client.list(function(err, list) {
    if (err) throw err;
    console.log(JSON.stringify(list, null, &amp;#39; &amp;#39;));
  });

  /**
   * on:error: eğer bağlantıda herhangi bir problem olursa bildirim yapar
   */
  client.on(&amp;#39;error&amp;#39;, function() {
    console.log(&amp;#39;error&amp;#39;);
  });

});

/**
 * account objesini connect metoduna gönderip çalıştırıyoruz.
 */
client.connect(account);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;client.list&lt;/code&gt; Serverdaki dosyalarımızın listesini döner. Eğer sunucudaki herhangi bir klasöre erişmek isterseniz bunu list fonksiyonuna path olarak girmeniz yeterli.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client.list(&amp;#39;/theme/css/less&amp;#39;)&lt;/code&gt; böylelikle istediğiniz klasörü listelemiş olursunuz.&lt;/p&gt;
&lt;p&gt;Kendi hostumdan şu şekilde bir çıktı aldım:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
{
  &amp;quot;type&amp;quot;: &amp;quot;d&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;stylesheets&amp;quot;,
  &amp;quot;sticky&amp;quot;: false,
  &amp;quot;rights&amp;quot;: {
   &amp;quot;user&amp;quot;: &amp;quot;rwx&amp;quot;,
   &amp;quot;group&amp;quot;: &amp;quot;rx&amp;quot;,
   &amp;quot;other&amp;quot;: &amp;quot;rx&amp;quot;
  },
  &amp;quot;owner&amp;quot;: &amp;quot;16761643&amp;quot;,
  &amp;quot;group&amp;quot;: &amp;quot;16761643&amp;quot;,
  &amp;quot;size&amp;quot;: 4096,
  &amp;quot;date&amp;quot;: &amp;quot;2015-10-17T21:19:00.000Z&amp;quot;
 }
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/npm-moduleri-ftp-nedir/log.png&quot; alt=&quot;log.js&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type : ‘-‘ ya da ‘d’ olarak döner. - dosya olduğunu, d bir dizin olduğunu gösterir&lt;/li&gt;
&lt;li&gt;Date : son değiştirilme tarihini verir.&lt;/li&gt;
&lt;li&gt;Rights : dosya yazma, okuma izinleri. rwx rx rx olarak çıktı geliyor&lt;/li&gt;
&lt;li&gt;Size : Dosyanın boyutunu kb cinsinden verir.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dosya-indirme&quot;&gt;Dosya indirme&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;client.get(&amp;#39;/javascrip/main.js&amp;#39;, function(err) {

});
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;dosya-g-nderme&quot;&gt;Dosya gönderme&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;client.put(&amp;#39;/javascrip/main.js&amp;#39;, function(err) {
   if (err) throw err;
   client.end();
});
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;pathname-working-directory-pwd&quot;&gt;Pathname working directory PWD&lt;/h3&gt;
&lt;p&gt;içerisinde bulunduğunuz path’i verir&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client.pwd(function(err) {
   if (err) throw err;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;! &lt;code&gt;FTP&lt;/code&gt; modülü tüm ftp komutlarını içermez.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;bkz: &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_FTP_commands&quot;&gt;ftp komutlar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IETF(internet engineering task force)’in ftp &lt;a href=&quot;https://www.ietf.org/rfc/rfc959.txt&quot;&gt;kontrol listesi&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Minimal ftp uygulamasında daha fazla bilgilendirme yapacağım.&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Npm modulleri - Inquirerjs nedir?</title>
      <link>http://nodejs-dersleri.github.io/articles/npm-moduleri-inquirerjs-nedir/</link>
      <pubDate>Tue, 03 Nov 2015 23:30:00 +0300</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/npm-moduleri-inquirerjs-nedir/</guid>
      <author></author>
      <description>&lt;p&gt;Yeoman ile proje oluşturduğumuzda ya da &lt;code&gt;npm init&lt;/code&gt; yaptığımızda karşımıza bazı sorular gelir. Inquirerjs’le tam olarak bunu yapcağız.&lt;/p&gt;
&lt;p&gt;Kullanıcıya bazı sorular sorup cevaplarına göre işlem yapacağız.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/qGWs6qI4sw8&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/qGWs6qI4sw8/0.jpg&quot; alt=&quot;Nodejs dersleri&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;package-json&quot;&gt;package.json&lt;/h3&gt;
&lt;p&gt;Npm init ile başlıyoruz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;package.json dosyamız oluştu.&lt;/p&gt;
&lt;h3 id=&quot;index-js&quot;&gt;index.js&lt;/h3&gt;
&lt;p&gt;Şimdi &lt;code&gt;index.js&lt;/code&gt; dosyası oluşturuyoruz.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/npm-moduleri-inquirerjs-nedir/main.png&quot; alt=&quot;main.js&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// inquirer modülünü çağırıyoruz
var inquirer = require(&amp;#39;inquirer&amp;#39;);

// gelen veriye göre bir dosya oluşturacağız bunun içinde `fs` modülünü kullanacağız.
var fs = require(&amp;#39;fs&amp;#39;);

// Sorularımızı oluşturuyoruz

var  questions = [
  {
    type: &amp;quot;input&amp;quot;,
    name: &amp;quot;name&amp;quot;,
    message: &amp;quot;Project name?&amp;quot;
  },
  {
    type: &amp;quot;list&amp;quot;,
     name: &amp;quot;main&amp;quot;,
     message: &amp;quot;Main file&amp;quot;,
     choices: [ &amp;quot;app.js&amp;quot;, &amp;quot;app2.js&amp;quot;, &amp;quot;npm.js&amp;quot; ],
  },
  {
      type: &amp;quot;password&amp;quot;,
      name : &amp;#39;checkbox&amp;#39;,
      message : &amp;#39;Password&amp;#39;
  }
];

// şimdi inquirerjs&amp;#39;i çalıştırıyoruz



inquirer.prompt(questions, function( answers ) {

  // Eğer main dosyası var ise fs ile, seçilen dosyayı oluşturacağız
  if(answers.main){

      // @ oluşturulacak dosya
      // @ dosyaya yazacağımız data
      // @ işlem sonucu
      fs.writeFile(answers.main, &amp;#39;var main =&amp;quot;&amp;quot;;&amp;#39;, function(){
        console.log(&amp;#39;dosya yazıldı! Şimdi dizininizi kontrol edin&amp;#39;)
      });
  }
  console.log(JSON.stringify(answers, null , &amp;#39; &amp;#39;));
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Çıktı olarak console’a json datayı yazacak ve seçilen dosyayı dizin klasörüne oluşturacak.&lt;/p&gt;
&lt;h3 id=&quot;okudu-unuz-i-in-te-ekk-r-ederim-&quot;&gt;Okuduğunuz için teşekkür ederim.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nodejs-dersleri&quot;&gt;Tüm Github repositorileri&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Npm modül yapımı 1</title>
      <link>http://nodejs-dersleri.github.io/articles/npm-modul-yapimi-1/</link>
      <pubDate>Mon, 02 Nov 2015 00:30:00 +0300</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/npm-modul-yapimi-1/</guid>
      <author></author>
      <description>&lt;p&gt;Npm için yapacağımız bu modül her çağırdığımızda bize benzersiz ID’ler üretecek. Modülümüzü oluşturduktan sonra küçük bir test yazaıp onaydan geçirdikten sonra npm sitesine kayıt işlemini yapalım.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;yap-lacaklar&quot;&gt;Yapılacaklar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Modülü oluşturalım&lt;/li&gt;
&lt;li&gt;Basit bir test yazalım&lt;/li&gt;
&lt;li&gt;Modulü npm sitesine kayıt ettirelim&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Npm init yaparak başlayalım. proje dosyası oluşturup terminalden klasöre erilim daha sonra &lt;code&gt;npm init&lt;/code&gt; yaparak başlayalım.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Modülünüzün ismini, açıklamasını, versiyonunu .etc girdikten sonra package.json dosyamızı oluşturduk.&lt;/p&gt;
&lt;h3 id=&quot;package-json&quot;&gt;package.json&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;guidfy&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Globally unique identifier&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;test&amp;quot;: &amp;quot;mocha -R spec -u tdd tests/*.js&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;mocha&amp;quot;: &amp;quot;~1.14.0&amp;quot;,
    &amp;quot;should&amp;quot;: &amp;quot;^7.1.1&amp;quot;
  },
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;git+https://github.com/arifcakiroglu/guidify.git&amp;quot;
  },
  &amp;quot;keywords&amp;quot;: [
    &amp;quot;unique&amp;quot;,
    &amp;quot;id&amp;quot;,
    &amp;quot;unique&amp;quot;,
    &amp;quot;guid&amp;quot;,
    &amp;quot;guidify&amp;quot;
  ],
  &amp;quot;author&amp;quot;: &amp;quot;Arif Cakiroglu &amp;lt;cakirogluarif@gmail.com&amp;gt;&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;bugs&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/arifcakiroglu/guidify/issues&amp;quot;
  },
  &amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/arifcakiroglu/guidify#readme&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;index-js&quot;&gt;index.js&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;module.exports= function(){
  // Anlık tarihi alıp d değişkenine atıyoruz.
  var d = new Date().getTime();

  // &amp;#39;xxx&amp;#39; uzunluğunda bir çıktı üreteceğiz.
  var guid = &amp;#39;xxxxxxxxxxxxxxxxxxxx&amp;#39;.replace(/[x]/g, function(c) {
    var r = (d + Math.random()*16)%16 | 0;
    d = Math.floor(d/16);
    return (c==&amp;#39;x&amp;#39; ? r : (r&amp;amp;0x3|0x8)).toString(16);
  });

  // Test edelim çalışıyoru mu diye
  // console.log(&amp;quot;Bu ilk guid&amp;#39;imiz %s&amp;quot;,guid);
  return guid
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Modülümüzün index dosyasını oluşturduk çalışıp çalışmadığını görmek için &lt;code&gt;app.js&lt;/code&gt; dosyası oluşturup modülümüzü çağıracağız&lt;/p&gt;
&lt;h3 id=&quot;app-js&quot;&gt;app.js&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// şimdilik denemek için ./index.js olarak çağırıyoruz npm&amp;#39;e kayıt ettirmeden önce app.js dosyasını sileceğiz

var guidify = require(&amp;quot;./index.js&amp;quot;);
console.log(&amp;quot;Bu ilk guid&amp;#39;imiz %s&amp;quot;, guidify());

// Çıktımız bu şekilde oldu. Her denemede farklı bir çıktı alacağız.
// Bu ilk guid&amp;#39;imiz 18dc1f7c0373d09bdc1a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/npm-modul-yapimi-1/log.png&quot; alt=&quot;ilk çıktı&quot;&gt;&lt;/p&gt;
&lt;p&gt;Şimdi ise bir test yazalım.&lt;/p&gt;
&lt;p&gt;Bunun için &lt;code&gt;/tests&lt;/code&gt; klasörü açıyorum içerisine &lt;code&gt;guidify.js&lt;/code&gt; dosyamı oluşturuyorum.&lt;/p&gt;
&lt;h3 id=&quot;guidify-js&quot;&gt;guidify.js&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Module dependencies.
 */

 // bir üst dizindeki modülümüzü çağırıyoruz
var Guidify = require(&amp;#39;../index.js&amp;#39;);
var assert = require(&amp;#39;assert&amp;#39;);

suite(&amp;#39;\033[36m Test guid yaratıcı \033[90m&amp;#39;, function() {
  test(&amp;#39;unique&amp;#39;, function(done) {
    var guid = Guidify();
    assert.equal(typeof(guid), &amp;#39;string&amp;#39;, &amp;#39;Should return a string&amp;#39; );
    assert.equal(guid.length, 20, &amp;#39;Should return a string with length 20&amp;#39; );
    done();
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;makefile&quot;&gt;Makefile&lt;/h3&gt;
&lt;p&gt;Terminalden &lt;code&gt;make test&lt;/code&gt; ya da &lt;code&gt;npm test&lt;/code&gt; yazarak testimizi çalıştırıyoruz.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/npm-modul-yapimi-1/test.png&quot; alt=&quot;test&quot;&gt;&lt;/p&gt;
&lt;p&gt;Makefile’ın ne olduğunu ve detaylarını başka bir makalede açıklayacapım. (yazınca buraya linkini eklerim söz)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install: package.json
    @npm install

test:
    @./node_modules/.bin/mocha -u tdd

.PHONY: test
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;npm-kay-t&quot;&gt;Npm kayıt&lt;/h3&gt;
&lt;p&gt;Geç oldu buna yarın devam ederim :)&lt;/p&gt;
&lt;h3 id=&quot;okudu-unuz-i-in-te-ekk-r-ederim-&quot;&gt;Okuduğunuz için teşekkür ederim.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nodejs-dersleri&quot;&gt;Tüm Github repositorileri&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Nodejs ile screen scraping</title>
      <link>http://nodejs-dersleri.github.io/articles/nodejs-ile-screen-scraping/</link>
      <pubDate>Sun, 01 Nov 2015 16:00:00 +0300</pubDate>
      <guid isPermaLink="true">http://nodejs-dersleri.github.io/articles/nodejs-ile-screen-scraping/</guid>
      <author></author>
      <description>&lt;p&gt;Herhangi bir siteden istediğiniz verileri jQuery core komutlarıyla alabilirsiniz. Bunun için &lt;code&gt;request&lt;/code&gt; ve &lt;code&gt;cheerio&lt;/code&gt; npm modullerini kullanacağız.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;request&lt;/code&gt; ile indirdiğimiz datayı &lt;code&gt;cheerio&lt;/code&gt; kullanarak jQuery gibi işlem yapacağız.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;packages-json&quot;&gt;packages.json&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;screen-scraping&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Nodejs ile screen scraping&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;node index.js&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Arif Cakiroglu &amp;lt;cakirogluarif@gmail.com&amp;gt; (http://www.arifcakiroglu.com)&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;cheerio&amp;quot;: &amp;quot;^0.19.0&amp;quot;,
    &amp;quot;request&amp;quot;: &amp;quot;^2.65.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;packages.json&lt;/code&gt; dosyasını oluşturduktan sonra &lt;code&gt;npm install&lt;/code&gt; komutunu çalıştırıyoruz.&lt;/p&gt;
&lt;p&gt;Npm modulleri proje dosyamıza node_modules klasörüne inecektir. Daha sonra &lt;code&gt;index.js&lt;/code&gt; dosyası oluşturuyoruz.&lt;/p&gt;
&lt;h3 id=&quot;index-js&quot;&gt;index.js&lt;/h3&gt;
&lt;p&gt;Öncelikle node modullerimizi çağırıyoruz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var request = require(&amp;#39;request&amp;#39;);
var cheerio = require(&amp;#39;cheerio&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Url olarak static bir url ekliyorum: &lt;code&gt;var url = &amp;#39;https://www.npmjs.com/package/q&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Url sonundaki ‘q’ yerine herhangi bir npm modulü yazabilirsiniz.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request(url, function(error, response, html){
  if(!error){
    // request ile çağırdığımız urlden gelen html datayı &amp;#39;$&amp;#39; olarak yeniden tanımlıyoruz.
    var $ = cheerio.load(html);

    // Çıktı için json objesi oluşturuyorum
    var json = {};
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;cheerio modulü hakkında daha fazla bilgi almak için &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;reposu&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Modül isminin bulunduğu yeri inspectElement ile bulup alıyorum.
 * .package-name class&amp;#39;ını seçiyorum ve datasını json objesine title olarak atıyorum
 * daha sonra bu datayı console.log() ile yazdıracağız.
 */

$(&amp;#39;.package-name&amp;#39;).filter(function(){
  json.title = $(this).text().trim()
});


console.log(JSON.stringify(json, null, 4));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ve çıktı olarak name’ini alıyoruz&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/nodejs-ile-screen-scraping/nodejs-ile-screen-scraping-1.png&quot; alt=&quot;ilk çıktımız&quot;&gt;&lt;/p&gt;
&lt;p&gt;description, repository ve toplam download sayısını da alıyoruz&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
// Description
$(&amp;#39;.package-description&amp;#39;).filter(function(){
  json.desc = $(this).text().trim()
});


// Repository
$(&amp;#39;.box li&amp;#39;).eq(2).filter(function(){
  json.repo = $(this).text().trim()
});


// Total download
$(&amp;#39;.collaborators&amp;#39;).next().next().filter(function(){
    json.stats = $(this).children().eq(2).text().replace(/\s+/g, &amp;#39; &amp;#39;).trim();
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/nodejs-ile-screen-scraping/nodejs-ile-screen-scraping-2.png&quot; alt=&quot;ikinci çıktımız&quot;&gt;&lt;/p&gt;
&lt;p&gt;Kısaca cheerio kullanarak screen scraping için basit bir örnek oluşturduk.&lt;/p&gt;
&lt;p&gt;Daha sonrası için &lt;a href=&quot;http://phantomjs.org/&quot;&gt;phanthopjs&lt;/a&gt; ile bir uygulama yapacağız. Yazınca buray ekleyeceğim linkini.&lt;/p&gt;
&lt;h3 id=&quot;okudu-unuz-i-in-te-ekk-r-ederim-&quot;&gt;Okuduğunuz için teşekkür ederim.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nodejs-dersleri&quot;&gt;Tüm Github repositorileri&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
    </item>
  </channel>
</rss>